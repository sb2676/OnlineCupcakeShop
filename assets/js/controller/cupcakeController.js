//controller is filled with handelers

//do constructor then handle handelers

//in event handeler it should read input, update the model and update the view

export class CupcakeController {
    /*
     * 
     * @param {type} model - The model the controller interacts with.
     * @param {type} view - The view the controller interatcs with.
     * @returns {CupcakeController} The object representing the cupcake controller.
     */
    constructor(model, view) {
        this.model = model;
        this.view = view;
        //1. create the selects dynamically
        let layerNames = this.model.getProperties();
        
        layerNames.forEach(layer => {
            this.view.createSelect(layer, this.model.getOptions(layer));
        });

        // 2. Register an event handler for select 'change' events. When the value 
        // of a select element changes, the handleSelectChange method is invoked.
        this.view.selects.forEach(select => {
            select.addEventListener("change", this.handleSelectChange);
        });

    }

 /**
     * Handles the change event generated by a select. When 'change' event is 
     * triggered, the model and the view need to be updated.
     * 
     * @param {type} event
     * @returns {undefined}
     */
    handleSelectChange = (event) => {
        let select = event.target;

        this.model[select.name] = select.value;

        this.model.store();
        
        const [bread, icing, decor] = this.model.getValues();
        this.view.renderCupcake(bread, icing, decor);
        
    }

}